// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Main
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// types
enum ProgressStatus {
  ToDo
  InProgress
  Review
  Completed
}

enum Role {
  MASTER
  GUEST
}

enum MonthlyBudgetType {
  SUM
  SPECIFIED
}

// models
model Tag {
  id          Int        @id @unique @default(autoincrement())
  name        String
  color       String
  Milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  milestoneId Int?
  Task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId      Int?
}

model Link {
  id          Int        @id @unique @default(autoincrement())
  name        String
  href        String
  Task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId      Int?
  Memo        Memo?      @relation(fields: [memoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memoId      Int?
  Milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  milestoneId Int?
  Project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId   Int?
}

model Task {
  id           Int            @id @unique @default(autoincrement())
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  deletedAt    DateTime?
  startAt      DateTime?      @default(now())
  endAt        DateTime?
  title        String
  description  String?
  content      String?
  color        String?        @default("gray")
  links        Link[]
  tags         Tag[]
  progress     ProgressStatus @default(ToDo)
  priority     Int            @default(3)
  isBookmarked Boolean        @default(false)
  Milestone    Milestone?     @relation(fields: [milestoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  milestoneId  Int?
  Project      Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId    Int?
}

model Memo {
  id           Int        @id @unique @default(autoincrement())
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  deletedAt    DateTime?
  title        String
  content      String
  isChecked    Boolean    @default(false)
  isBookmarked Boolean    @default(false)
  color        String?    @default("gray")
  link         Link[]
  Milestone    Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  milestoneId  Int?
  Project      Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId    Int?
}

model Comment {
  id           Int        @id @unique @default(autoincrement())
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  deletedAt    DateTime?
  content      String
  isChecked    Boolean    @default(false)
  isBookmarked Boolean    @default(false)
  Milestone    Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId  Int?
}

model Milestone {
  id             Int            @id @unique @default(autoincrement())
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
  deletedAt      DateTime?
  startAt        DateTime?      @default(now())
  endAt          DateTime?
  title          String?        @default("마일스톤 이름")
  unicode        String?        @default("1f4bb")
  classification String?
  priority       Int            @default(3)
  progress       ProgressStatus @default(ToDo)
  isClosed       Boolean        @default(false)
  isBookmarked   Boolean        @default(false)
  color          String?        @default("gray")
  tags           Tag[]
  links          Link[]
  tasks          Task[]
  memos          Memo[]
  comments       Comment[]
  Project        Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId      Int?
}

model Project {
  id          Int         @id @unique @default(autoincrement())
  title       String?     @default("프로젝트")
  description String?     @default("")
  milestones  Milestone[]
  tasks       Task[]
  memos       Memo[]
  links       Link[]
  User        User?       @relation(fields: [userId], references: [id])
  userId      Int?
}

model User {
  id             Int              @id @unique @default(autoincrement())
  email          String           @unique
  password       String
  role           Role
  project        Project[]
  exercises      Exercise[]
  Weight         Weight[]
  MonthlyBudget  MonthlyBudget[]
  BudgetCategory BudgetCategory[]
}

model Exercise {
  id             Int          @id @unique @default(autoincrement())
  description    String?
  exerciseType   ExerciseType @relation(fields: [exerciseTypeId], references: [id])
  count          Int?
  date           DateTime
  exerciseTypeId Int
  User           User?        @relation(fields: [userId], references: [id])
  userId         Int?
}

model ExerciseType {
  id       Int        @id @unique @default(autoincrement())
  name     String
  unit     String
  Exercise Exercise[]
}

model Weight {
  id     Int      @id @unique @default(autoincrement())
  weight Float    @db.Real
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId Int
}

model MonthlyBudget {
  id                    Int                     @id @unique @default(autoincrement())
  year                  Int
  month                 Int
  type                  MonthlyBudgetType
  budget                Int?
  start                 String
  end                   String
  User                  User?                   @relation(fields: [userId], references: [id])
  userId                Int?
  MonthlyBudgetCategory MonthlyBudgetCategory[]
}

model BudgetCategory {
  id                    Int                     @id @unique @default(autoincrement())
  name                  String
  unicode               String
  MonthlyBudgetCategory MonthlyBudgetCategory[]
  user                  User                    @relation(fields: [userId], references: [id])
  userId                Int
}

model MonthlyBudgetCategory {
  id               Int             @id @unique @default(autoincrement())
  BudgetCategory   BudgetCategory? @relation(fields: [budgetCategoryId], references: [id])
  budgetCategoryId Int?
  budget           Int
  MonthlyBudget    MonthlyBudget   @relation(fields: [monthlyBudgetId], references: [id])
  monthlyBudgetId  Int
}
